# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

cmake_minimum_required(VERSION 3.13)

# Project
project(onnxruntime_samples C CXX)
if (WIN32)
 string(APPEND CMAKE_CXX_FLAGS " /W4")
else()
 string(APPEND CMAKE_CXX_FLAGS " -Wall -Wextra")
 string(APPEND CMAKE_C_FLAGS " -Wall -Wextra")
endif()

#onnxruntime providers
option(onnxruntime_USE_CUDA "Build with CUDA support" OFF)
option(onnxruntime_USE_OPENVINO "Build with OpenVINO support" OFF)
option(onnxruntime_USE_NNAPI_BUILTIN "Build with builtin NNAPI lib for Android NNAPI support" OFF)
option(onnxruntime_USE_DNNL "Build with DNNL support" OFF)
option(onnxruntime_USE_NUPHAR "Build with Nuphar" OFF)
option(onnxruntime_USE_TENSORRT "Build with TensorRT support" OFF)
option(LIBPNG_ROOTDIR "libpng root dir")
option(OPENCV_ROOTDIR "OpenCV root dir")
option(ONNXRUNTIME_ROOTDIR "onnxruntime root dir")
option(LIB_PACKAGE_DIR "Dir having all the libs packed")

if(LIB_PACKAGE_DIR)
  include_directories("${LIB_PACKAGE_DIR}/include")
  link_directories("${LIB_PACKAGE_DIR}/ort_libs" "${LIB_PACKAGE_DIR}/ov_libs")
else()
  if(NOT ONNXRUNTIME_ROOTDIR)
    if(WIN32)
      set(ONNXRUNTIME_ROOTDIR "C:/Program Files (x86)/onnxruntime")
    else()
      include_directories("/usr/local/include/onnxruntime")
    endif()
  endif()
  include_directories("${ONNXRUNTIME_ROOTDIR}/include" "${ONNXRUNTIME_ROOTDIR}/include/onnxruntime/core/session")
  link_directories("${ONNXRUNTIME_ROOTDIR}/lib")
endif()

#if JPEG lib is available, we'll use it for image decoding, otherwise we'll use WIC
find_package(JPEG)
if(LIBPNG_ROOTDIR)
  set(PNG_FOUND true)
  if(WIN32)
    set(PNG_LIBRARIES debug libpng16_d optimized libpng16)
  else()
    set(PNG_LIBRARIES png16)
  endif()
  set(PNG_INCLUDE_DIRS "${LIBPNG_ROOTDIR}/include")
  set(PNG_LIBDIR "${LIBPNG_ROOTDIR}/lib")
else()
  find_package(PNG)
endif()

if(OPENCV_ROOTDIR)
  set(OPENCV_FOUND true)
  set(OPENCV_INCLUDE_DIRS "${OPENCV_ROOTDIR}/include")
  set(OPENCV_LIBDIR "${OPENCV_ROOTDIR}/lib")
  file(GLOB OPENCV_DEBUG_LIBRARIES ${OPENCV_LIBDIR}/opencv_imgcodecs*d.lib ${OPENCV_LIBDIR}/opencv_dnn*d.lib ${OPENCV_LIBDIR}/opencv_core*d.lib ${OPENCV_LIBDIR}/opencv_imgproc*d.lib)
  file(GLOB OPENCV_RELEASE_LIBRARIES ${OPENCV_LIBDIR}/opencv_imgcodecs*.lib ${OPENCV_LIBDIR}/opencv_dnn*.lib ${OPENCV_LIBDIR}/opencv_core*.lib ${OPENCV_LIBDIR}/opencv_imgproc*.lib)
  list(FILTER OPENCV_RELEASE_LIBRARIES EXCLUDE REGEX ".*d\\.lib")
  set(OPENCV_BINDIR "${OPENCV_ROOTDIR}/bin")
  file(GLOB OPENCV_DLLS ${OPENCV_BINDIR}/opencv_imgcodecs* ${OPENCV_BINDIR}/opencv_dnn* ${OPENCV_BINDIR}/opencv_core* ${OPENCV_BINDIR}/opencv_imgproc*)
endif()

if(onnxruntime_USE_CUDA)
  add_definitions(-DUSE_CUDA)
endif()
if(onnxruntime_USE_OPENVINO)
  add_definitions(-DUSE_OPENVINO)
endif()
if(onnxruntime_USE_NNAPI_BUILTIN)
  add_definitions(-DUSE_NNAPI)
endif()
if(onnxruntime_USE_DNNL)
  add_definitions(-DUSE_DNNL)
endif()
if(onnxruntime_USE_NUPHAR)
  add_definitions(-DUSE_NUPHAR)
endif()
if(onnxruntime_USE_TENSORRT)
  add_definitions(-DUSE_TENSORRT)
endif()
if(onnxruntime_USE_DML)
  message("Enabling DML")
  add_definitions(-DUSE_DML)
endif()

# some examples require a Windows build environment
if(WIN32)
  #missing cpu_provider_factory.h
  #add_subdirectory(imagenet)
  #add_subdirectory(MNIST)
  if(OPENCV_FOUND)
    add_subdirectory(OpenVINO_EP/squeezenet_classification)
  endif()
endif()
if(PNG_FOUND)
  add_subdirectory(fns_candy_style_transfer)
endif()
add_subdirectory(model-explorer)
